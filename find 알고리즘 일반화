#include <stdio.h>
#include <string.h>
void *find(void *begin, void *end, void *value, size_t size, int(*compareData)(void *, void *));
int compareInt(void *vp1, void *vp2);     // vp1 이 가리키는 값이 크면 1, 같으면 0, 작으면 -1 리턴 
int compareDouble(void *vp1, void *vp2);  // vp1 이 가리키는 값이 크면 1, 같으면 0, 작으면 -1 리턴 
int comparePersonName(void *vp1, void * vp2); //값이 같으면 0, 다르면 -1 리턴
int comparePersonAge(void *vp1, void * vp2); //값이 같으면 0, 다르면 -1 리턴
typedef struct _person {
	char name[20];
	int age;
	double height;
}Person;

int main() {
	Person pAry[3] = { {"홍길동",20, 172.5},{"강감찬", 24, 174.4},{"신사임당", 26, 167.7} };
	Person a = { "강감찬", 0, 0.0 }; //pAry에서 "강감찬"을 찾기 위한 변수
	Person b = { "", 26, 0.0 }; //pAry에서 26살을 찾기 위한 변수
	Person *sp; //find함수의 리턴 값을 저장할 포인터 변수

	sp = (Person*)find(pAry, pAry + 4, &a, sizeof(Person), comparePersonName);
	if (sp == pAry + 4) {
		printf("notfind\n");
	}
	else {
		printf("%s/ %d/ %.1lf\n", sp->name, sp->age, sp->height);
	}

	sp = (Person*)find(pAry, pAry + 4, &b, sizeof(Person), comparePersonAge);
	if (sp == pAry + 4) {
		printf("notfind\n");
	}
	else {
		printf("%s/ %d/ %.1lf\n", sp->name, sp->age, sp->height);
	}

	int x[10] = { 1,2,3,4,5,6,7,8,9,10 };
	double  y[5] = { 1.1, 2.2, 3.3, 4.4, 5.5 };
	int number = 5;
	double dNumber = 5.5;
	int *ip;
	double *dp;

	ip = (int *)find(x, x + 10, &number, sizeof(int), compareInt);

	if (ip == x + 10) {
		printf("not find\n"); 
	}
	else {
		printf("find data = %d\n", *ip);
	}

	dp = (double *)find(y, y + 5, &dNumber, sizeof(double), compareDouble);
	if (dp == y + 5) {
		printf("not find\n");
	}
	else {
		printf("find data = %lf\n", *dp);
	}

	return 0;
}
void *find(void *begin, void *end, void *value, size_t size, int(*compareData)(void *, void *))
{	
	while (begin != end && compareData(begin, value) != 0)
	{
		begin = (char*)begin + size;
	}
	return begin;
}

int compareInt(void *vp1, void *vp2)
{
	if (*(int*)vp1 > *(int*)vp2) {
		return 1;
	}
	else if (*(int*)vp1 == *(int*)vp2) {
		return 0;
	}
	else {
		return -1;
	}
}

int compareDouble(void *vp1, void *vp2)
{
	if (*(double*)vp1 > *(double*)vp2) {
		return 1;
	}
	else if (*(double*)vp1 < *(double*)vp2) {
		return -1;
	}
	else {
		return 0;
	}
}

int comparePersonName(void *vp1, void * vp2)
{
	Person *p1 = (Person *)vp1;
	Person *p2 = (Person *)vp2;

	if (strcmp((p1->name),(p2->name))== 0) {
		return 0;
	}
	else {
		return -1;
	}
}

int comparePersonAge(void *vp1, void * vp2)
{
	Person *p1 = (Person *)vp1;
	Person *p2 = (Person *)vp2;

	if ((p1->age) == (p2->age)) {
		return 0;
	}
	else {
		return -1;
	}
}
